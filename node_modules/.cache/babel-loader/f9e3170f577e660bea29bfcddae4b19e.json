{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (idToken, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: idToken,\n    uderId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n\n    if (!isSignUp) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n    }\n\n    axios.post(url, authData).then(response => {\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", response.data.idToken);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", response.data.localId);\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n    }).catch(error => {\n      console.log(error);\n      dispatch(authFail(error.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) dispatch(logout());else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) dispatch(logout());else {\n        const userId = localStorage.getItem(\"uderId\");\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","idToken","userId","AUTH_SUCCESS","uderId","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignUp","authData","returnSecureToken","url","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","console","log","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","token","getItem"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9C,SAAO;AACLJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,YADb;AAELF,IAAAA,OAAO,EAAEA,OAFJ;AAGLG,IAAAA,MAAM,EAAEF;AAHH,GAAP;AAKD,CANM;AAOP,OAAO,MAAMG,QAAQ,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLR,IAAAA,IAAI,EAAEH,WAAW,CAACY,SADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1BC,EAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,gBAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,QAAxB;AAEA,SAAO;AACLZ,IAAAA,IAAI,EAAEH,WAAW,CAACgB;AADb,GAAP;AAGD,CARM;AAUP,OAAO,MAAMC,gBAAgB,GAAIC,cAAD,IAAoB;AAClD,SAAQC,QAAD,IAAc;AACnBC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,QAAQ,CAACN,MAAM,EAAP,CAAR;AACD,KAFS,EAEPK,cAAc,GAAG,IAFV,CAAV;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMG,IAAI,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,KAA+B;AACjD,SAAQL,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACjB,SAAS,EAAV,CAAR;AACA,UAAMuB,QAAQ,GAAG;AACfH,MAAAA,KAAK,EAAEA,KADQ;AAEfC,MAAAA,QAAQ,EAAEA,QAFK;AAGfG,MAAAA,iBAAiB,EAAE;AAHJ,KAAjB;AAKA,QAAIC,GAAG,GACL,uGADF;;AAEA,QAAI,CAACH,QAAL,EAAe;AACbG,MAAAA,GAAG,GACD,mHADF;AAED;;AACD1B,IAAAA,KAAK,CACF2B,IADH,CACQD,GADR,EACaF,QADb,EAEGI,IAFH,CAESC,QAAD,IAAc;AAClB,YAAMC,cAAc,GAAG,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,QAAQ,CAACI,IAAT,CAAcC,SAAd,GAA0B,IAD5B,CAAvB;AAGArB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,OAArB,EAA8BN,QAAQ,CAACI,IAAT,CAAc5B,OAA5C;AACAQ,MAAAA,YAAY,CAACsB,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AACAjB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,QAArB,EAA+BN,QAAQ,CAACI,IAAT,CAAcG,OAA7C;AAEAlB,MAAAA,QAAQ,CAACF,gBAAgB,CAACa,QAAQ,CAACI,IAAT,CAAcC,SAAf,CAAjB,CAAR;AACAhB,MAAAA,QAAQ,CAACd,WAAW,CAACyB,QAAQ,CAACI,IAAT,CAAc5B,OAAf,EAAwBwB,QAAQ,CAACI,IAAT,CAAcG,OAAtC,CAAZ,CAAR;AACD,KAZH,EAaGC,KAbH,CAaU3B,KAAD,IAAW;AAChB4B,MAAAA,OAAO,CAACC,GAAR,CAAY7B,KAAZ;AACAQ,MAAAA,QAAQ,CAACT,QAAQ,CAACC,KAAK,CAACmB,QAAN,CAAeI,IAAf,CAAoBvB,KAArB,CAAT,CAAR;AACD,KAhBH;AAiBD,GA9BD;AA+BD,CAhCM;AAiCP,OAAO,MAAM8B,mBAAmB,GAAIC,IAAD,IAAU;AAC3C,SAAO;AACLvC,IAAAA,IAAI,EAAEH,WAAW,CAAC2C,sBADb;AAELD,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CALM;AAOP,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAQzB,QAAD,IAAc;AACnB,UAAM0B,KAAK,GAAG/B,YAAY,CAACgC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAI,CAACD,KAAL,EAAY1B,QAAQ,CAACN,MAAM,EAAP,CAAR,CAAZ,KACK;AACH,YAAMkB,cAAc,GAAG,IAAIC,IAAJ,CAASlB,YAAY,CAACgC,OAAb,CAAqB,gBAArB,CAAT,CAAvB;AACA,UAAIf,cAAc,IAAI,IAAIC,IAAJ,EAAtB,EAAkCb,QAAQ,CAACN,MAAM,EAAP,CAAR,CAAlC,KACK;AACH,cAAMN,MAAM,GAAGO,YAAY,CAACgC,OAAb,CAAqB,QAArB,CAAf;AACA3B,QAAAA,QAAQ,CAACd,WAAW,CAACwC,KAAD,EAAQtC,MAAR,CAAZ,CAAR;AACAY,QAAAA,QAAQ,CACNF,gBAAgB,CACd,CAACc,cAAc,CAACE,OAAf,KAA2B,IAAID,IAAJ,GAAWC,OAAX,EAA5B,IAAoD,IADtC,CADV,CAAR;AAKD;AACF;AACF,GAhBD;AAiBD,CAlBM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START,\n  };\n};\n\nexport const authSuccess = (idToken, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: idToken,\n    uderId: userId,\n  };\n};\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n\n  return {\n    type: actionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return (dispatch) => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const auth = (email, password, isSignUp) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true,\n    };\n    let url =\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n    if (!isSignUp) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n    }\n    axios\n      .post(url, authData)\n      .then((response) => {\n        const expirationDate = new Date(\n          new Date().getTime() + response.data.expiresIn * 1000\n        );\n        localStorage.setItem(\"token\", response.data.idToken);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        localStorage.setItem(\"userId\", response.data.localId);\n\n        dispatch(checkAuthTimeout(response.data.expiresIn));\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\n      })\n      .catch((error) => {\n        console.log(error);\n        dispatch(authFail(error.response.data.error));\n      });\n  };\n};\nexport const setAuthRedirectPath = (path) => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path,\n  };\n};\n\nexport const authCheckState = () => {\n  return (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) dispatch(logout());\n    else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) dispatch(logout());\n      else {\n        const userId = localStorage.getItem(\"uderId\");\n        dispatch(authSuccess(token, userId));\n        dispatch(\n          checkAuthTimeout(\n            (expirationDate.getTime() - new Date().getTime()) / 1000\n          )\n        );\n      }\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}