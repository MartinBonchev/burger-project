{"ast":null,"code":"import * as actionTypes from \"./actions\";\nconst initialState = {\n  ingredients: {\n    Salad: 0,\n    Bacon: 0,\n    Cheese: 0,\n    Meat: 0\n  },\n  totalPrice: 4,\n  durationTime: 0,\n  perchasable: false // purchasing: false,\n  // loading: false,\n  // error: false,\n\n};\nconst INGREDIENT_PRICES = {\n  Salad: 0.5,\n  Cheese: 0.5,\n  Bacon: 1,\n  Meat: 2\n};\n\nconst deliveryDurationCalculator = totalIngredients => {\n  let duration = 0;\n\n  switch (totalIngredients) {\n    case totalIngredients >= 1:\n      duration = 15;\n      break;\n\n    case totalIngredients > 4:\n      duration = 20;\n      break;\n\n    case totalIngredients > 6:\n      duration = 30;\n      break;\n\n    case totalIngredients > 10:\n      duration = 60;\n      break;\n  }\n\n  return totalIngredients;\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return { ...state,\n        ingredients: { ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n        },\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName],\n        durationTime: deliveryDurationCalculator(Object.values(state.ingredients).reduce((acc, curr) => {\n          acc += Number(curr);\n          return acc;\n        }, 0))\n      };\n\n    case actionTypes.REMOVE_INGREDIENT:\n      return { ...state,\n        ingredients: { ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n        },\n        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName],\n        durationTime: deliveryDurationCalculator(Object.values(state.ingredients).reduce((acc, curr) => {\n          acc += Number(curr);\n          return acc;\n        }, 0))\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/store/reducer.js"],"names":["actionTypes","initialState","ingredients","Salad","Bacon","Cheese","Meat","totalPrice","durationTime","perchasable","INGREDIENT_PRICES","deliveryDurationCalculator","totalIngredients","duration","reducer","state","action","type","ADD_INGREDIENT","ingredientName","Object","values","reduce","acc","curr","Number","REMOVE_INGREDIENT"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,WAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE,CADI;AAEXC,IAAAA,KAAK,EAAE,CAFI;AAGXC,IAAAA,MAAM,EAAE,CAHG;AAIXC,IAAAA,IAAI,EAAE;AAJK,GADM;AAOnBC,EAAAA,UAAU,EAAE,CAPO;AAQnBC,EAAAA,YAAY,EAAE,CARK;AASnBC,EAAAA,WAAW,EAAE,KATM,CAUnB;AACA;AACA;;AAZmB,CAArB;AAcA,MAAMC,iBAAiB,GAAG;AACxBP,EAAAA,KAAK,EAAE,GADiB;AAExBE,EAAAA,MAAM,EAAE,GAFgB;AAGxBD,EAAAA,KAAK,EAAE,CAHiB;AAIxBE,EAAAA,IAAI,EAAE;AAJkB,CAA1B;;AAOA,MAAMK,0BAA0B,GAAIC,gBAAD,IAAsB;AACvD,MAAIC,QAAQ,GAAG,CAAf;;AACA,UAAQD,gBAAR;AACE,SAAKA,gBAAgB,IAAI,CAAzB;AACEC,MAAAA,QAAQ,GAAG,EAAX;AACA;;AACF,SAAKD,gBAAgB,GAAG,CAAxB;AACEC,MAAAA,QAAQ,GAAG,EAAX;AACA;;AACF,SAAKD,gBAAgB,GAAG,CAAxB;AACEC,MAAAA,QAAQ,GAAG,EAAX;AACA;;AACF,SAAKD,gBAAgB,GAAG,EAAxB;AACEC,MAAAA,QAAQ,GAAG,EAAX;AACA;AAZJ;;AAcA,SAAOD,gBAAP;AACD,CAjBD;;AAmBA,MAAME,OAAO,GAAG,CAACC,KAAK,GAAGd,YAAT,EAAuBe,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,WAAW,CAACkB,cAAjB;AACE,aAAO,EACL,GAAGH,KADE;AAELb,QAAAA,WAAW,EAAE,EACX,GAAGa,KAAK,CAACb,WADE;AAEX,WAACc,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACb,WAAN,CAAkBc,MAAM,CAACG,cAAzB,IAA2C;AAFzD,SAFR;AAMLZ,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmBG,iBAAiB,CAACM,MAAM,CAACG,cAAR,CAN3C;AAOLX,QAAAA,YAAY,EAAEG,0BAA0B,CACtCS,MAAM,CAACC,MAAP,CAAcN,KAAK,CAACb,WAApB,EAAiCoB,MAAjC,CAAwC,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrDD,UAAAA,GAAG,IAAIE,MAAM,CAACD,IAAD,CAAb;AACA,iBAAOD,GAAP;AACD,SAHD,EAGG,CAHH,CADsC;AAPnC,OAAP;;AAcF,SAAKvB,WAAW,CAAC0B,iBAAjB;AACE,aAAO,EACL,GAAGX,KADE;AAELb,QAAAA,WAAW,EAAE,EACX,GAAGa,KAAK,CAACb,WADE;AAEX,WAACc,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACb,WAAN,CAAkBc,MAAM,CAACG,cAAzB,IAA2C;AAFzD,SAFR;AAMLZ,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmBG,iBAAiB,CAACM,MAAM,CAACG,cAAR,CAN3C;AAOLX,QAAAA,YAAY,EAAEG,0BAA0B,CACtCS,MAAM,CAACC,MAAP,CAAcN,KAAK,CAACb,WAApB,EAAiCoB,MAAjC,CAAwC,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrDD,UAAAA,GAAG,IAAIE,MAAM,CAACD,IAAD,CAAb;AACA,iBAAOD,GAAP;AACD,SAHD,EAGG,CAHH,CADsC;AAPnC,OAAP;;AAeF;AACE,aAAOR,KAAP;AAjCJ;AAmCD,CApCD;;AAsCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from \"./actions\";\n\nconst initialState = {\n  ingredients: {\n    Salad: 0,\n    Bacon: 0,\n    Cheese: 0,\n    Meat: 0,\n  },\n  totalPrice: 4,\n  durationTime: 0,\n  perchasable: false,\n  // purchasing: false,\n  // loading: false,\n  // error: false,\n};\nconst INGREDIENT_PRICES = {\n  Salad: 0.5,\n  Cheese: 0.5,\n  Bacon: 1,\n  Meat: 2,\n};\n\nconst deliveryDurationCalculator = (totalIngredients) => {\n  let duration = 0;\n  switch (totalIngredients) {\n    case totalIngredients >= 1:\n      duration = 15;\n      break;\n    case totalIngredients > 4:\n      duration = 20;\n      break;\n    case totalIngredients > 6:\n      duration = 30;\n      break;\n    case totalIngredients > 10:\n      duration = 60;\n      break;\n  }\n  return totalIngredients;\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return {\n        ...state,\n        ingredients: {\n          ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1,\n        },\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName],\n        durationTime: deliveryDurationCalculator(\n          Object.values(state.ingredients).reduce((acc, curr) => {\n            acc += Number(curr);\n            return acc;\n          }, 0)\n        ),\n      };\n    case actionTypes.REMOVE_INGREDIENT:\n      return {\n        ...state,\n        ingredients: {\n          ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1,\n        },\n        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName],\n        durationTime: deliveryDurationCalculator(\n          Object.values(state.ingredients).reduce((acc, curr) => {\n            acc += Number(curr);\n            return acc;\n          }, 0)\n        ),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}