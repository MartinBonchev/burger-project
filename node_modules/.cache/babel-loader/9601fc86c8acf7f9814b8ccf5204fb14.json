{"ast":null,"code":"var _jsxFileName = \"/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n  }\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedOrderForm = { ...this.state.orderForm\n    };\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n\n    for (const inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  render() {\n    let formElementsArray = [];\n\n    for (const key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    const form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      change: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","inputIdentifier","updatedOrderForm","orderForm","updatedFormElement","target","checkValidity","formIsValid","setState","rules","isValid","patternEmail","patternNumeric","trim","length","maxLength","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n  };\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedOrderForm = {\n      ...this.state.orderForm,\n    };\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.touched = true;\n\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for (const inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  render() {\n    let formElementsArray = [];\n    for (const key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n    const form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        change={(event) => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n    return (\n      <div>\n        <form>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n      </div>\n    );\n  }\n}\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}