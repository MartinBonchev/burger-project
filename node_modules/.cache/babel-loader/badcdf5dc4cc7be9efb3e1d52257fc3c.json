{"ast":null,"code":"var _jsxFileName = \"/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n  }\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedControls = { ...this.state.controls\n    };\n    const updatedFormElement = { ...updatedControls[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    updatedControls[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n\n    for (const inputIdentifier in updatedControls) {\n      formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({\n      controls: updatedControls,\n      formIsValid: formIsValid\n    });\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  render() {\n    let formElementsArray = [];\n\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = formElementsArray.map(formElement => {\n      console.log(formElement);\n      return /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        change: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","inputIdentifier","updatedControls","updatedFormElement","target","checkValidity","formIsValid","setState","rules","isValid","patternEmail","patternNumeric","trim","length","maxLength","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n  };\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedControls = {\n      ...this.state.controls,\n    };\n    const updatedFormElement = { ...updatedControls[inputIdentifier] };\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.touched = true;\n\n    updatedControls[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for (const inputIdentifier in updatedControls) {\n      formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({ controls: updatedControls, formIsValid: formIsValid });\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  render() {\n    let formElementsArray = [];\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n    const form = formElementsArray.map((formElement) => {\n      console.log(formElement);\n      return (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          change={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      );\n    });\n    return (\n      <div className={classes.Auth}>\n        <form>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n      </div>\n    );\n  }\n}\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}