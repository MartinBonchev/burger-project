{"ast":null,"code":"import _defineProperty from\"/Users/martinbonchev/coding/udemy/react/burger-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/martinbonchev/coding/udemy/react/burger-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/martinbonchev/coding/udemy/react/burger-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/martinbonchev/coding/udemy/react/burger-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/martinbonchev/coding/udemy/react/burger-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import Button from\"../../../components/UI/Button/Button\";import classes from\"./ContactData.css\";import axios from\"../../../axios-orders\";import Spinner from\"../../../components/UI/Spinner/Spinner\";import Input from\"../../../components/UI/Input/Input\";import{connect}from\"react-redux\";import withErrorHandler from\"../../../hoc/withErrorHandler/withErrorHandler\";import*as actions from\"../../../store/actions/index\";import{updateObject,checkValidity}from\"../../../store/utility\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ContactData=/*#__PURE__*/function(_Component){_inherits(ContactData,_Component);var _super=_createSuper(ContactData);function ContactData(){var _this;_classCallCheck(this,ContactData);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={orderForm:{name:{elementType:\"input\",elementConfig:{type:\"text\",placeholder:\"Your Name\"},value:\"\",validation:{required:true,isNumeric:false},valid:false,touched:false},street:{elementType:\"input\",elementConfig:{type:\"text\",placeholder:\"Street\"},value:\"\",validation:{required:true},valid:false,touched:false},zipCode:{elementType:\"input\",elementConfig:{type:\"text\",placeholder:\"ZIP CODE\"},value:\"\",validation:{required:true,isNumeric:true,minLength:4,maxLength:8},valid:false,touched:false},country:{elementType:\"input\",elementConfig:{type:\"text\",placeholder:\"Country\"},value:\"\",validation:{required:true,isNumeric:false},valid:false,touched:false},email:{elementType:\"input\",elementConfig:{type:\"email\",placeholder:\"Your Email\"},value:\"\",validation:{required:true,isEmail:true},valid:false,touched:false},freeDrink:{elementType:\"select\",elementConfig:{options:[{value:\"cocaCola\",displayValue:\"CoCa-Cola\"},{value:\"fanta\",displayValue:\"Fanta\"},{value:\"sprite\",displayValue:\"Sprite\"},{value:\"beer\",displayValue:\"Beer\"}]},valid:true,value:\"CoCa-Cola\",validation:{}}},formIsValid:false};_this.orderHandler=function(event){event.preventDefault();var formData={};for(var formElementIdentifier in _this.state.orderForm){formData[formElementIdentifier]=_this.state.orderForm[formElementIdentifier].value;}var order={ingredients:_this.props.ingredients,price:_this.props.price,orderData:formData,userId:_this.props.userId};_this.props.onOrderBurger(order,_this.props.token);};return _this;}_createClass(ContactData,[{key:\"inputChangedHandler\",value:function inputChangedHandler(event,inputIdentifier){var updatedFormElement=updateObject(this.state.orderForm[inputIdentifier],{value:event.target.value,valid:checkValidity(event.target.value,this.state.orderForm[inputIdentifier].validation),touched:true});var updatedOrderForm=updateObject(this.state.orderForm,_defineProperty({},inputIdentifier,updatedFormElement));var formIsValid=true;for(var _inputIdentifier in updatedOrderForm){formIsValid=updatedOrderForm[_inputIdentifier].valid&&formIsValid;}this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid});}},{key:\"render\",value:function render(){var _this2=this;var formElementsArray=[];for(var key in this.state.orderForm){formElementsArray.push({id:key,config:this.state.orderForm[key]});}var form=null;if(this.props.loading){form=/*#__PURE__*/_jsx(Spinner,{});}else{form=/*#__PURE__*/_jsxs(\"form\",{onSubmit:this.orderHandler,children:[formElementsArray.map(function(formElement){return/*#__PURE__*/_jsx(Input,{elementType:formElement.config.elementType,elementConfig:formElement.config.elementConfig,value:formElement.config.value,invalid:!formElement.config.valid,shouldValidate:formElement.config.validation,touched:formElement.config.touched,change:function change(event){return _this2.inputChangedHandler(event,formElement.id);}},formElement.id);}),/*#__PURE__*/_jsx(Button,{btnType:\"Success\",clicked:this.orderHandler,disabled:!this.state.formIsValid,children:\"ORDER\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:classes.ContactData,children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Enter your Contact Data\"}),form]});}}]);return ContactData;}(Component);var mapStateToProps=function mapStateToProps(state){return{ingredients:state.burgerBuilder.ingredients,price:state.burgerBuilder.totalPrice,loading:state.order.loading,token:state.auth.token,userId:state.auth.userId};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onOrderBurger:function onOrderBurger(orderData,token){return dispatch(actions.purchaseBurger(orderData,token));}};};export default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","connect","withErrorHandler","actions","updateObject","checkValidity","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","isNumeric","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","freeDrink","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","price","orderData","userId","onOrderBurger","token","inputIdentifier","updatedFormElement","target","updatedOrderForm","setState","formElementsArray","key","push","id","config","form","loading","map","formElement","inputChangedHandler","mapStateToProps","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.css\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../../store/utility\";\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: false,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP CODE\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: true,\n          minLength: 4,\n          maxLength: 8,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: false,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      freeDrink: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"cocaCola\", displayValue: \"CoCa-Cola\" },\n            { value: \"fanta\", displayValue: \"Fanta\" },\n            { value: \"sprite\", displayValue: \"Sprite\" },\n            { value: \"beer\", displayValue: \"Beer\" },\n          ],\n        },\n        valid: true,\n        value: \"CoCa-Cola\",\n        validation: {},\n      },\n    },\n    formIsValid: false,\n  };\n\n  orderHandler = (event) => {\n    event.preventDefault();\n    const formData = {};\n    for (const formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId,\n    };\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.orderForm[inputIdentifier].validation\n        ),\n        touched: true,\n      }\n    );\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement,\n    });\n\n    let formIsValid = true;\n    for (const inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  }\n\n  render() {\n    let formElementsArray = [];\n    for (const key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n\n    let form = null;\n    if (this.props.loading) {\n      form = <Spinner />;\n    } else {\n      form = (\n        <form onSubmit={this.orderHandler}>\n          {formElementsArray.map((formElement) => {\n            return (\n              <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                change={(event) =>\n                  this.inputChangedHandler(event, formElement.id)\n                }\n              />\n            );\n          })}\n          <Button\n            btnType=\"Success\"\n            clicked={this.orderHandler}\n            disabled={!this.state.formIsValid}\n          >\n            ORDER\n          </Button>\n        </form>\n      );\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  };\n};\nconst mapDispatchToProps = (dispatch) => ({\n  onOrderBurger: (orderData, token) =>\n    dispatch(actions.purchaseBurger(orderData, token)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n"]},"metadata":{},"sourceType":"module"}