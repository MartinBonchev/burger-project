{"ast":null,"code":"var _jsxFileName = \"/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp); // this.props.history.push(\"/\");\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true; // eslint-disable-next-line\n\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // eslint-disable-next-line\n\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  render() {\n    let formElementsArray = [];\n    let form = null;\n    let errorMessage = null;\n\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    form = formElementsArray.map(formElement => {\n      return /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        change: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this);\n    });\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 22\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errorMessage, /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.submitHandler,\n          children: [form, /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Success\",\n            children: \"SUBMIT \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Danger\",\n        clicked: this.switchAuthModeHandler,\n        children: [\"SWITCH TO \", this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Spinner","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","rules","isValid","patternEmail","patternNumeric","trim","length","maxLength","test","isNumeric","render","formElementsArray","form","errorMessage","key","push","id","config","map","formElement","loading","error","message","mapStateToProps","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignUp: true,\n  };\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    this.setState({ controls: updatedControls });\n  };\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    // eslint-disable-next-line\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    // eslint-disable-next-line\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignUp\n    );\n    // this.props.history.push(\"/\");\n  };\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { isSignUp: !prevState.isSignUp };\n    });\n  };\n  render() {\n    let formElementsArray = [];\n    let form = null;\n    let errorMessage = null;\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n    form = formElementsArray.map((formElement) => {\n      return (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          change={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      );\n    });\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n    return (\n      <div className={classes.Auth}>\n        <div>\n          {errorMessage}\n          <form onSubmit={this.submitHandler}>\n            {form}\n            <Button btnType=\"Success\">SUBMIT </Button>\n          </form>\n        </div>\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n          SWITCH TO {this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}