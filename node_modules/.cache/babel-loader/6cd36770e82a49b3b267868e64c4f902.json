{"ast":null,"code":"import*as actionTypes from\"./actionTypes\";import axios from\"axios\";export var authStart=function authStart(){return{type:actionTypes.AUTH_START};};export var authSuccess=function authSuccess(idToken,userId){return{type:actionTypes.AUTH_SUCCESS,idToken:idToken,userId:userId};};export var authFail=function authFail(error){return{type:actionTypes.AUTH_FAIL,error:error};};export var logout=function logout(){localStorage.removeItem(\"token\");localStorage.removeItem(\"expirationDate\");localStorage.removeItem(\"userId\");return{type:actionTypes.AUTH_LOGOUT};};export var checkAuthTimeout=function checkAuthTimeout(expirationTime){return function(dispatch){setTimeout(function(){dispatch(logout());},+expirationTime*1000);};};export var auth=function auth(email,password,isSignUp){return function(dispatch){dispatch(authStart());var authData={email:email,password:password,returnSecureToken:true};var url=\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";if(!isSignUp){url=\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";}axios.post(url,authData).then(function(response){var expirationDate=new Date(new Date().getTime()+response.data.expiresIn*1000);localStorage.setItem(\"token\",response.data.idToken);localStorage.setItem(\"expirationDate\",expirationDate);localStorage.setItem(\"userId\",response.data.localId);dispatch(checkAuthTimeout(response.data.expiresIn));dispatch(authSuccess(response.data.idToken,response.data.localId));}).catch(function(error){dispatch(authFail(error.response.data.error.message));});};};export var setAuthRedirectPath=function setAuthRedirectPath(path){return{type:actionTypes.SET_AUTH_REDIRECT_PATH,path:path};};export var authCheckState=function authCheckState(){return function(dispatch){var token=localStorage.getItem(\"token\");if(!token)dispatch(logout());else{var expirationDate=new Date(localStorage.getItem(\"expirationDate\"));if(expirationDate<=new Date())dispatch(logout());else{var userId=localStorage.getItem(\"userId\");dispatch(authSuccess(token,userId));dispatch(checkAuthTimeout((expirationDate.getTime()-new Date().getTime())/1000));}}};};","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","idToken","userId","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignUp","authData","returnSecureToken","url","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","message","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","token","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START,\n  };\n};\n\nexport const authSuccess = (idToken, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: idToken,\n    userId: userId,\n  };\n};\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n\n  return {\n    type: actionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return (dispatch) => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, +expirationTime * 1000);\n  };\n};\n\nexport const auth = (email, password, isSignUp) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true,\n    };\n    let url =\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n    if (!isSignUp) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n    }\n    axios\n      .post(url, authData)\n      .then((response) => {\n        const expirationDate = new Date(\n          new Date().getTime() + response.data.expiresIn * 1000\n        );\n        localStorage.setItem(\"token\", response.data.idToken);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        localStorage.setItem(\"userId\", response.data.localId);\n\n        dispatch(checkAuthTimeout(response.data.expiresIn));\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\n      })\n      .catch((error) => {\n        dispatch(authFail(error.response.data.error.message));\n      });\n  };\n};\nexport const setAuthRedirectPath = (path) => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path,\n  };\n};\n\nexport const authCheckState = () => {\n  return (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) dispatch(logout());\n    else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) dispatch(logout());\n      else {\n        const userId = localStorage.getItem(\"userId\");\n        dispatch(authSuccess(token, userId));\n        dispatch(\n          checkAuthTimeout(\n            (expirationDate.getTime() - new Date().getTime()) / 1000\n          )\n        );\n      }\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}