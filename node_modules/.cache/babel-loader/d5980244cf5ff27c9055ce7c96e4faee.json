{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport axios from \"../../axios-orders\";\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post(\"/orders.json?auth=\" + token, orderData).then(response => {\n      console.log(response);\n      dispatch(purchaseBurgerSuccess(response.data.name));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchedOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchedOrdersFail = error => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchedOrdersStart = () => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_START\n  };\n};\nexport const fetchedOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(fetchedOrdersStart());\n    axios.get(\"/orders.json\", {\n      params: {\n        auth: token,\n        orderBy: '\"userId\"',\n        equalTo: `\"${userId}\"`\n      }\n    }).then(res => {\n      let fetchedOrders = [];\n\n      for (const key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: [key]\n        });\n      }\n\n      dispatch(fetchedOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchedOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","token","dispatch","post","then","response","console","log","data","name","catch","purchaseInit","PURCHASE_INIT","fetchedOrdersSuccess","orders","FECTHED_ORDERS_SUCCESS","fetchedOrdersFail","FECTHED_ORDERS_FAIL","fetchedOrdersStart","FECTHED_ORDERS_START","fetchedOrders","userId","get","params","auth","orderBy","equalTo","res","key","push","err"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport axios from \"../../axios-orders\";\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData,\n  };\n};\n\nexport const purchaseBurgerFail = (error) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error,\n  };\n};\n\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START,\n  };\n};\n\nexport const purchaseBurger = (orderData, token) => {\n  return (dispatch) => {\n    dispatch(purchaseBurgerStart());\n    axios\n      .post(\"/orders.json?auth=\" + token, orderData)\n      .then((response) => {\n        console.log(response);\n        dispatch(purchaseBurgerSuccess(response.data.name));\n      })\n      .catch((error) => {\n        dispatch(purchaseBurgerFail(error));\n      });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT,\n  };\n};\nexport const fetchedOrdersSuccess = (orders) => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_SUCCESS,\n    orders: orders,\n  };\n};\nexport const fetchedOrdersFail = (error) => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_FAIL,\n    error: error,\n  };\n};\nexport const fetchedOrdersStart = () => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_START,\n  };\n};\nexport const fetchedOrders = (token, userId) => {\n  return (dispatch) => {\n    dispatch(fetchedOrdersStart());\n\n    axios\n      .get(\"/orders.json\", {\n        params: {\n          auth: token,\n          orderBy: '\"userId\"',\n          equalTo: `\"${userId}\"`,\n        },\n      })\n      .then((res) => {\n        let fetchedOrders = [];\n\n        for (const key in res.data) {\n          fetchedOrders.push({ ...res.data[key], id: [key] });\n        }\n        dispatch(fetchedOrdersSuccess(fetchedOrders));\n      })\n      .catch((err) => {\n        dispatch(fetchedOrdersFail(err));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}