{"ast":null,"code":"var _jsxFileName = \"/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js\";\n// @ts-nocheck\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\nimport { updateObject, checkValidity } from \"../../store/utility\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignUp: false\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n      if (!this.props.error) this.props.history.push(\"/\");\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n  }\n\n  render() {\n    let formElementsArray = [];\n    let form = null;\n    let errorMessage = null;\n\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    form = formElementsArray.map(formElement => {\n      return /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        change: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this);\n    });\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 22\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [errorMessage, /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.submitHandler,\n          children: [form, /*#__PURE__*/_jsxDEV(Button, {\n            btnType: \"Success\",\n            children: \"SUBMIT \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Danger\",\n        clicked: this.switchAuthModeHandler,\n        children: [\"SWITCH TO \", this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Spinner","Redirect","updateObject","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","error","history","push","switchAuthModeHandler","prevState","render","formElementsArray","form","errorMessage","key","id","config","map","formElement","loading","mapStateToProps","auth","isAuthenticated","token","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\nimport { updateObject, checkValidity } from \"../../store/utility\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignUp: false,\n  };\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      }),\n    });\n\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignUp\n    );\n\n    if (!this.props.error) this.props.history.push(\"/\");\n  };\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { isSignUp: !prevState.isSignUp };\n    });\n  };\n  render() {\n    let formElementsArray = [];\n    let form = null;\n    let errorMessage = null;\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n    form = formElementsArray.map((formElement) => {\n      return (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          change={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      );\n    });\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error}</p>;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        <div>\n          {errorMessage}\n          <form onSubmit={this.submitHandler}>\n            {form}\n            <Button btnType=\"Success\">SUBMIT </Button>\n          </form>\n        </div>\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n          SWITCH TO {this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}