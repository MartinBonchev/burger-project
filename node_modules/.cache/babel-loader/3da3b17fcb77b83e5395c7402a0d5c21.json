{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nimport axios from \"../../axios-orders\";\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post(\"/orders.json\", orderData).then(response => {\n      console.log(response.data);\n      dispatch(purchaseBurgerSuccess(response.data.name));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchedOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchedOrdersFail = error => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchedOrdersStart = () => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_START\n  };\n};\nexport const fetchedOrders = () => {\n  return dispatch => {\n    dispatch(fetchedOrdersStart);\n    axios.get(\"/orders.json\").then(res => {\n      let fetchedOrders = [];\n      console.log(res);\n\n      for (const key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: [key]\n        });\n      }\n\n      dispatch(fetchedOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchedOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","console","log","data","name","catch","purchaseInit","PURCHASE_INIT","fetchedOrdersSuccess","orders","FECTHED_ORDERS_SUCCESS","fetchedOrdersFail","FECTHED_ORDERS_FAIL","fetchedOrdersStart","FECTHED_ORDERS_START","fetchedOrders","get","res","key","push","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACtD,SAAO;AACLC,IAAAA,IAAI,EAAEL,WAAW,CAACM,uBADb;AAELC,IAAAA,OAAO,EAAEJ,EAFJ;AAGLC,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD,CANM;AAQP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAC3C,SAAO;AACLJ,IAAAA,IAAI,EAAEL,WAAW,CAACU,oBADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACvC,SAAO;AACLN,IAAAA,IAAI,EAAEL,WAAW,CAACY;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIT,SAAD,IAAe;AAC3C,SAAQU,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACAV,IAAAA,KAAK,CACFc,IADH,CACQ,cADR,EACwBX,SADxB,EAEGY,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAN,MAAAA,QAAQ,CAACZ,qBAAqB,CAACe,QAAQ,CAACG,IAAT,CAAcC,IAAf,CAAtB,CAAR;AACD,KALH,EAMGC,KANH,CAMUb,KAAD,IAAW;AAChBK,MAAAA,QAAQ,CAACN,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACD,KARH;AASD,GAXD;AAYD,CAbM;AAcP,OAAO,MAAMc,YAAY,GAAG,MAAM;AAChC,SAAO;AACLlB,IAAAA,IAAI,EAAEL,WAAW,CAACwB;AADb,GAAP;AAGD,CAJM;AAKP,OAAO,MAAMC,oBAAoB,GAAIC,MAAD,IAAY;AAC9C,SAAO;AACLrB,IAAAA,IAAI,EAAEL,WAAW,CAAC2B,sBADb;AAELD,IAAAA,MAAM,EAAEA;AAFH,GAAP;AAID,CALM;AAMP,OAAO,MAAME,iBAAiB,GAAInB,KAAD,IAAW;AAC1C,SAAO;AACLJ,IAAAA,IAAI,EAAEL,WAAW,CAAC6B,mBADb;AAELpB,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAMP,OAAO,MAAMqB,kBAAkB,GAAG,MAAM;AACtC,SAAO;AACLzB,IAAAA,IAAI,EAAEL,WAAW,CAAC+B;AADb,GAAP;AAGD,CAJM;AAKP,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAQlB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACgB,kBAAD,CAAR;AACA7B,IAAAA,KAAK,CACFgC,GADH,CACO,cADP,EAEGjB,IAFH,CAESkB,GAAD,IAAS;AACb,UAAIF,aAAa,GAAG,EAApB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;;AACA,WAAK,MAAMC,GAAX,IAAkBD,GAAG,CAACd,IAAtB,EAA4B;AAC1BY,QAAAA,aAAa,CAACI,IAAd,CAAmB,EAAE,GAAGF,GAAG,CAACd,IAAJ,CAASe,GAAT,CAAL;AAAoBhC,UAAAA,EAAE,EAAE,CAACgC,GAAD;AAAxB,SAAnB;AACD;;AACDrB,MAAAA,QAAQ,CAACW,oBAAoB,CAACO,aAAD,CAArB,CAAR;AACD,KATH,EAUGV,KAVH,CAUUe,GAAD,IAAS;AACdvB,MAAAA,QAAQ,CAACc,iBAAiB,CAACS,GAAD,CAAlB,CAAR;AACD,KAZH;AAaD,GAfD;AAgBD,CAjBM","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\nimport axios from \"../../axios-orders\";\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData,\n  };\n};\n\nexport const purchaseBurgerFail = (error) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error,\n  };\n};\n\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START,\n  };\n};\n\nexport const purchaseBurger = (orderData) => {\n  return (dispatch) => {\n    dispatch(purchaseBurgerStart());\n    axios\n      .post(\"/orders.json\", orderData)\n      .then((response) => {\n        console.log(response.data);\n        dispatch(purchaseBurgerSuccess(response.data.name));\n      })\n      .catch((error) => {\n        dispatch(purchaseBurgerFail(error));\n      });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT,\n  };\n};\nexport const fetchedOrdersSuccess = (orders) => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_SUCCESS,\n    orders: orders,\n  };\n};\nexport const fetchedOrdersFail = (error) => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_FAIL,\n    error: error,\n  };\n};\nexport const fetchedOrdersStart = () => {\n  return {\n    type: actionTypes.FECTHED_ORDERS_START,\n  };\n};\nexport const fetchedOrders = () => {\n  return (dispatch) => {\n    dispatch(fetchedOrdersStart);\n    axios\n      .get(\"/orders.json\")\n      .then((res) => {\n        let fetchedOrders = [];\n        console.log(res);\n        for (const key in res.data) {\n          fetchedOrders.push({ ...res.data[key], id: [key] });\n        }\n        dispatch(fetchedOrdersSuccess(fetchedOrders));\n      })\n      .catch((err) => {\n        dispatch(fetchedOrdersFail(err));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}