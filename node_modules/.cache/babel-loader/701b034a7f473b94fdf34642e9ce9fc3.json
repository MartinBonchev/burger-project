{"ast":null,"code":"import * as actionTypes from \"./actions\";\nconst initialState = {\n  ingredients: {\n    Salad: 0,\n    Bacon: 0,\n    Cheese: 0,\n    Meat: 0\n  },\n  totalPrice: 4,\n  durationTime: 0 // perchasable: false,\n  // purchasing: false,\n  // loading: false,\n  // error: false,\n\n};\nconst INGREDIENT_PRICES = {\n  Salad: 0.5,\n  Cheese: 0.5,\n  Bacon: 1,\n  Meat: 2\n};\n\nconst deliveryDurationCalculator = ingredients => {\n  let totalIngredients = 0;\n  let duration = null; // for (const ingredient in ingredients) {\n  //   totalIngredients += ingredients[ingredient];\n  // }\n\n  totalIngredients = Object.values(ingredients).reduce((acc, curr) => {\n    return acc + Number(curr);\n  }, 0);\n  if (totalIngredients >= 1) duration = 15;\n  if (totalIngredients >= 4) duration = 20;\n  if (totalIngredients >= 6) duration = 30;\n  if (totalIngredients >= 10) duration = 60;\n  return duration;\n};\n\nconst updatePerchaseState = ingredients => {\n  const sum = Object.values(ingredients).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return {\n    perchasable: sum > 0\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return { ...state,\n        ingredients: { ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n        },\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName],\n        durationTime: deliveryDurationCalculator(state.ingredients)\n      };\n\n    case actionTypes.REMOVE_INGREDIENT:\n      return { ...state,\n        ingredients: { ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n        },\n        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName],\n        durationTime: deliveryDurationCalculator(state.ingredients)\n      };\n\n    case actionTypes.GET_DURATION_TIME:\n      return { ...state,\n        durationTime: deliveryDurationCalculator(state.ingredients)\n      };\n\n    case actionTypes.GET_TOTAL_PRICE:\n      console.log(state);\n      return { ...state,\n        totalPrice: updatePerchaseState(state.ingredients)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/store/reducer.js"],"names":["actionTypes","initialState","ingredients","Salad","Bacon","Cheese","Meat","totalPrice","durationTime","INGREDIENT_PRICES","deliveryDurationCalculator","totalIngredients","duration","Object","values","reduce","acc","curr","Number","updatePerchaseState","sum","perchasable","reducer","state","action","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT","GET_DURATION_TIME","GET_TOTAL_PRICE","console","log"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actions\";\n\nconst initialState = {\n  ingredients: {\n    Salad: 0,\n    Bacon: 0,\n    Cheese: 0,\n    Meat: 0,\n  },\n  totalPrice: 4,\n  durationTime: 0,\n  // perchasable: false,\n  // purchasing: false,\n  // loading: false,\n  // error: false,\n};\nconst INGREDIENT_PRICES = {\n  Salad: 0.5,\n  Cheese: 0.5,\n  Bacon: 1,\n  Meat: 2,\n};\n\nconst deliveryDurationCalculator = (ingredients) => {\n  let totalIngredients = 0;\n  let duration = null;\n  // for (const ingredient in ingredients) {\n  //   totalIngredients += ingredients[ingredient];\n  // }\n  totalIngredients = Object.values(ingredients).reduce((acc, curr) => {\n    return acc + Number(curr);\n  }, 0);\n\n  if (totalIngredients >= 1) duration = 15;\n  if (totalIngredients >= 4) duration = 20;\n  if (totalIngredients >= 6) duration = 30;\n  if (totalIngredients >= 10) duration = 60;\n  return duration;\n};\n\nconst updatePerchaseState = (ingredients) => {\n  const sum = Object.values(ingredients).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return { perchasable: sum > 0 };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return {\n        ...state,\n        ingredients: {\n          ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1,\n        },\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName],\n        durationTime: deliveryDurationCalculator(state.ingredients),\n      };\n    case actionTypes.REMOVE_INGREDIENT:\n      return {\n        ...state,\n        ingredients: {\n          ...state.ingredients,\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1,\n        },\n        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName],\n        durationTime: deliveryDurationCalculator(state.ingredients),\n      };\n    case actionTypes.GET_DURATION_TIME:\n      return {\n        ...state,\n        durationTime: deliveryDurationCalculator(state.ingredients),\n      };\n    case actionTypes.GET_TOTAL_PRICE:\n      console.log(state);\n      return {\n        ...state,\n        totalPrice: updatePerchaseState(state.ingredients),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}