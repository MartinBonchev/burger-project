{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (idToken, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: idToken,\n    uderId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = exparationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout);\n    }, +exparationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n\n    if (!isSignUp) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n    }\n\n    axios.post(url, authData).then(response => {\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", response.data.idToken);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(error => {\n      dispatch(authFail(error.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","idToken","userId","AUTH_SUCCESS","uderId","authFail","error","AUTH_FAIL","logout","AUTH_LOGOUT","checkAuthTimeout","exparationTime","dispatch","setTimeout","auth","email","password","isSignUp","authData","returnSecureToken","url","post","then","response","expirationDate","Date","getTime","data","expiresIn","localStorage","setItem","localId","catch","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9C,SAAO;AACLJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,YADb;AAELF,IAAAA,OAAO,EAAEA,OAFJ;AAGLG,IAAAA,MAAM,EAAEF;AAHH,GAAP;AAKD,CANM;AAOP,OAAO,MAAMG,QAAQ,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLR,IAAAA,IAAI,EAAEH,WAAW,CAACY,SADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1B,SAAO;AACLV,IAAAA,IAAI,EAAEH,WAAW,CAACc;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,gBAAgB,GAAIC,cAAD,IAAoB;AAClD,SAAQC,QAAD,IAAc;AACnBC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD,KAFS,EAEP,CAACG,cAAD,GAAkB,IAFX,CAAV;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMG,IAAI,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,KAA+B;AACjD,SAAQL,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACf,SAAS,EAAV,CAAR;AACA,UAAMqB,QAAQ,GAAG;AACfH,MAAAA,KAAK,EAAEA,KADQ;AAEfC,MAAAA,QAAQ,EAAEA,QAFK;AAGfG,MAAAA,iBAAiB,EAAE;AAHJ,KAAjB;AAKA,QAAIC,GAAG,GACL,uGADF;;AAEA,QAAI,CAACH,QAAL,EAAe;AACbG,MAAAA,GAAG,GACD,mHADF;AAED;;AACDxB,IAAAA,KAAK,CACFyB,IADH,CACQD,GADR,EACaF,QADb,EAEGI,IAFH,CAESC,QAAD,IAAc;AAClB,YAAMC,cAAc,GAAG,IAAIC,IAAJ,CACrB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,QAAQ,CAACI,IAAT,CAAcC,SAAd,GAA0B,IAD5B,CAAvB;AAGAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BP,QAAQ,CAACI,IAAT,CAAc1B,OAA5C;AACA4B,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCN,cAAvC;AAEAZ,MAAAA,QAAQ,CAACZ,WAAW,CAACuB,QAAQ,CAACI,IAAT,CAAc1B,OAAf,EAAwBsB,QAAQ,CAACI,IAAT,CAAcI,OAAtC,CAAZ,CAAR;AACAnB,MAAAA,QAAQ,CAACF,gBAAgB,CAACa,QAAQ,CAACI,IAAT,CAAcC,SAAf,CAAjB,CAAR;AACD,KAXH,EAYGI,KAZH,CAYU1B,KAAD,IAAW;AAChBM,MAAAA,QAAQ,CAACP,QAAQ,CAACC,KAAK,CAACiB,QAAN,CAAeI,IAAf,CAAoBrB,KAArB,CAAT,CAAR;AACD,KAdH;AAeD,GA5BD;AA6BD,CA9BM;AA+BP,OAAO,MAAM2B,mBAAmB,GAAIC,IAAD,IAAU;AAC3C,SAAO;AACLpC,IAAAA,IAAI,EAAEH,WAAW,CAACwC,sBADb;AAELD,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CALM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START,\n  };\n};\n\nexport const authSuccess = (idToken, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: idToken,\n    uderId: userId,\n  };\n};\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const checkAuthTimeout = (exparationTime) => {\n  return (dispatch) => {\n    setTimeout(() => {\n      dispatch(logout);\n    }, +exparationTime * 1000);\n  };\n};\n\nexport const auth = (email, password, isSignUp) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true,\n    };\n    let url =\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n    if (!isSignUp) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCT1oAkg5SYkgIQaNRoxOW8xTpq2EaFujY\";\n    }\n    axios\n      .post(url, authData)\n      .then((response) => {\n        const expirationDate = new Date(\n          new Date().getTime() + response.data.expiresIn * 1000\n        );\n        localStorage.setItem(\"token\", response.data.idToken);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\n        dispatch(checkAuthTimeout(response.data.expiresIn));\n      })\n      .catch((error) => {\n        dispatch(authFail(error.response.data.error));\n      });\n  };\n};\nexport const setAuthRedirectPath = (path) => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}