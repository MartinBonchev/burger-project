{"ast":null,"code":"var _jsxFileName = \"/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.css\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isNumeric: false\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP CODE\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isNumeric: true,\n            minLength: 4,\n            maxLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isNumeric: false\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        freeDrink: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"cocaCola\",\n              displayValue: \"CoCa-Cola\"\n            }, {\n              value: \"fanta\",\n              displayValue: \"Fanta\"\n            }, {\n              value: \"sprite\",\n              displayValue: \"Sprite\"\n            }, {\n              value: \"beer\",\n              displayValue: \"Beer\"\n            }]\n          },\n          valid: true,\n          value: \"CoCa-Cola\",\n          validation: {}\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (const formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      this.props.onOrderBurger(order);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedOrderForm = { ...this.state.orderForm\n    };\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n\n    for (const inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    let formElementsArray = [];\n\n    for (const key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = null;\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 14\n      }, this);\n    } else {\n      form = /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.orderHandler,\n        children: [formElementsArray.map(formElement => {\n          return /*#__PURE__*/_jsxDEV(Input, {\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            invalid: !formElement.config.valid,\n            shouldValidate: formElement.config.validation,\n            touched: formElement.config.touched,\n            change: event => this.inputChangedHandler(event, formElement.id)\n          }, formElement.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          clicked: this.orderHandler,\n          disabled: !this.state.formIsValid,\n          children: \"ORDER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ContactData,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your Contact Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onOrderBurger: orderData => dispatch(actions.purchaseBurgerStart(orderData))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData));","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","connect","withErrorHandler","actions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","isNumeric","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","freeDrink","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","price","orderData","onOrderBurger","checkValidity","rules","isValid","patternEmail","patternNumeric","trim","length","test","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","setState","render","formElementsArray","key","push","id","config","form","map","formElement","mapStateToProps","totalPrice","mapDispatchToProps","dispatch","purchaseBurgerStart"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.css\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: false,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP CODE\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: true,\n          minLength: 4,\n          maxLength: 8,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: false,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      freeDrink: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"cocaCola\", displayValue: \"CoCa-Cola\" },\n            { value: \"fanta\", displayValue: \"Fanta\" },\n            { value: \"sprite\", displayValue: \"Sprite\" },\n            { value: \"beer\", displayValue: \"Beer\" },\n          ],\n        },\n        valid: true,\n        value: \"CoCa-Cola\",\n        validation: {},\n      },\n    },\n    formIsValid: false,\n    loading: false,\n  };\n  checkValidity(value, rules) {\n    let isValid = true;\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n  orderHandler = (event) => {\n    event.preventDefault();\n    const formData = {};\n    for (const formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n    };\n    this.props.onOrderBurger(order);\n  };\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedOrderForm = {\n      ...this.state.orderForm,\n    };\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.touched = true;\n\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for (const inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  }\n\n  render() {\n    let formElementsArray = [];\n    for (const key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n\n    let form = null;\n    if (this.state.loading) {\n      form = <Spinner />;\n    } else {\n      form = (\n        <form onSubmit={this.orderHandler}>\n          {formElementsArray.map((formElement) => {\n            return (\n              <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                change={(event) =>\n                  this.inputChangedHandler(event, formElement.id)\n                }\n              />\n            );\n          })}\n          <Button\n            btnType=\"Success\"\n            clicked={this.orderHandler}\n            disabled={!this.state.formIsValid}\n          >\n            ORDER\n          </Button>\n        </form>\n      );\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ingredients: state.ingredients,\n    price: state.totalPrice,\n  };\n};\nconst mapDispatchToProps = (dispatch) => ({\n  onOrderBurger: (orderData) =>\n    dispatch(actions.purchaseBurgerStart(orderData)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData));\n"]},"metadata":{},"sourceType":"module"}