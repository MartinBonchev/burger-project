{"ast":null,"code":"var _jsxFileName = \"/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      signUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  render() {\n    let formElementsArray = [];\n\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = formElementsArray.map(formElement => {\n      return /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        change: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitHandler,\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"DANGER\",\n        children: \"SWITCH TO SIGN IN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/martinbonchev/coding/udemy/react/burger-project/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","signUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","rules","isValid","patternEmail","patternNumeric","trim","length","maxLength","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    signUp: true,\n  };\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      },\n    };\n    this.setState({ controls: updatedControls });\n  };\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    const patternEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const patternNumeric = /^\\d+$/;\n    if (!rules) return isValid;\n    if (rules.required) isValid = value.trim() !== \"\" && isValid;\n    if (rules.minLength) isValid = value.length >= rules.minLength && isValid;\n    if (rules.maxLength) isValid = value.length <= rules.minLength && isValid;\n    if (rules.isEmail) isValid = patternEmail.test(value) && isValid;\n    if (rules.isNumeric) isValid = patternNumeric.test(value) && isValid;\n    return isValid;\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value\n    );\n  };\n\n  render() {\n    let formElementsArray = [];\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n    const form = formElementsArray.map((formElement) => {\n      return (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          change={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      );\n    });\n    return (\n      <div className={classes.Auth}>\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button btnType=\"DANGER\">SWITCH TO SIGN IN</Button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}