{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","error","history","push","switchAuthModeHandler","prevState","formElementsArray","form","errorMessage","key","this","id","config","map","formElement","invalid","shouldValidate","change","authRedirect","isAuthenticated","to","loading","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.3413fd90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"_2N4mhcnGbW7JC6z-s6bKrq\"};","// @ts-nocheck\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\nimport { updateObject, checkValidity } from \"../../store/utility\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignUp: false,\n  };\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      }),\n    });\n\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignUp\n    );\n\n    if (!this.props.error) this.props.history.push(\"/\");\n  };\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { isSignUp: !prevState.isSignUp };\n    });\n  };\n  render() {\n    let formElementsArray = [];\n    let form = null;\n    let errorMessage = null;\n    for (const key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n    form = formElementsArray.map((formElement) => {\n      return (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          change={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      );\n    });\n    let authRedirect = null;\n    if (this.props.isAuthenticated) authRedirect = <Redirect to=\"/\" />;\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error}</p>;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        <div>\n          {authRedirect}\n          {errorMessage}\n          <form onSubmit={this.submitHandler}>\n            {form}\n            <Button btnType=\"Success\">SUBMIT </Button>\n          </form>\n        </div>\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n          SWITCH TO {this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React from \"react\";\nimport classes from \"./Input.css\";\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <div>\n          <h4>Pick a free drink!</h4>\n          <select\n            className={inputClasses.join(\" \")}\n            value={props.value}\n            onChange={props.change}\n          >\n            {props.elementConfig.options.map((option) => {\n              return (\n                <option\n                  key={option.value}\n                  value={option.value}\n                  onChange={props.change}\n                >\n                  {option.displayValue}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}\n        />\n      );\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"_2JD9xfJ5iopsdJv4stofmd\",\"Label\":\"_1BS4VDEyRn6gTvXKGhCGtY\",\"InputElement\":\"_2h6u9szBkMg06ulHHM-dBj\",\"Invalid\":\"_3PMZLK250RqXAYcKDUm6_p\"};"],"sourceRoot":""}