{"version":3,"sources":["containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","isNumeric","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","freeDrink","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","price","orderData","userId","onOrderBurger","token","inputIdentifier","updatedFormElement","updateObject","this","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","push","id","config","form","loading","Spinner","onSubmit","map","formElement","Input","invalid","shouldValidate","change","inputChangedHandler","disabled","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.444abdc0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"Ol2yTM1fo_f5CY0mRdr4s\"};","import React from \"react\";\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./CheckoutSummary.css\";\nconst checkoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well</h1>\n      <div\n        style={{\n          width: \"100%\",\n\n          margin: \"auto\",\n        }}\n      >\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default checkoutSummary;\n","import React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.css\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../../store/utility\";\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: false,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP CODE\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: true,\n          minLength: 4,\n          maxLength: 8,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isNumeric: false,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      freeDrink: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"cocaCola\", displayValue: \"CoCa-Cola\" },\n            { value: \"fanta\", displayValue: \"Fanta\" },\n            { value: \"sprite\", displayValue: \"Sprite\" },\n            { value: \"beer\", displayValue: \"Beer\" },\n          ],\n        },\n        valid: true,\n        value: \"CoCa-Cola\",\n        validation: {},\n      },\n    },\n    formIsValid: false,\n  };\n\n  orderHandler = (event) => {\n    event.preventDefault();\n    const formData = {};\n    for (const formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId,\n    };\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  inputChangedHandler(event, inputIdentifier) {\n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.orderForm[inputIdentifier].validation\n        ),\n        touched: true,\n      }\n    );\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement,\n    });\n\n    let formIsValid = true;\n    for (const inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  }\n\n  render() {\n    let formElementsArray = [];\n    for (const key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n\n    let form = null;\n    if (this.props.loading) {\n      form = <Spinner />;\n    } else {\n      form = (\n        <form onSubmit={this.orderHandler}>\n          {formElementsArray.map((formElement) => {\n            return (\n              <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                change={(event) =>\n                  this.inputChangedHandler(event, formElement.id)\n                }\n              />\n            );\n          })}\n          <Button\n            btnType=\"Success\"\n            clicked={this.orderHandler}\n            disabled={!this.state.formIsValid}\n          >\n            ORDER\n          </Button>\n        </form>\n      );\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  };\n};\nconst mapDispatchToProps = (dispatch) => ({\n  onOrderBurger: (orderData, token) =>\n    dispatch(actions.purchaseBurger(orderData, token)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"./ContactData/ContactData\";\nclass Checkout extends Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n    if (this.props.ingredients) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ingredients}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + \"/contact-data\"}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased,\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from \"react\";\nimport classes from \"./Input.css\";\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <div>\n          <h4>Pick a free drink!</h4>\n          <select\n            className={inputClasses.join(\" \")}\n            value={props.value}\n            onChange={props.change}\n          >\n            {props.elementConfig.options.map((option) => {\n              return (\n                <option\n                  key={option.value}\n                  value={option.value}\n                  onChange={props.change}\n                >\n                  {option.displayValue}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.change}\n        />\n      );\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"_2JD9xfJ5iopsdJv4stofmd\",\"Label\":\"_1BS4VDEyRn6gTvXKGhCGtY\",\"InputElement\":\"_2h6u9szBkMg06ulHHM-dBj\",\"Invalid\":\"_3PMZLK250RqXAYcKDUm6_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"j_q_G8Gs_-9oNwEM38yRf\"};"],"sourceRoot":""}